using System;
using System.Data;
using System.Configuration;
using System.Web;
using System.Web.Security;
using System.Web.UI;
using System.Web.UI.HtmlControls;
using System.Web.UI.WebControls;
using System.Web.UI.WebControls.WebParts;
using System.Collections.Generic;
using System.Linq;
using ReturnFilingModel;

<<<<<<< .mine
public enum CapG:int
{
    saleofshare_lt,
    saleoflandorbuilding_lt,
    saleofotherassetl_lt,
    saleofshare_st,
    saleoflandorbuilding_st,
    saleofotherassetl_st
}

=======
public enum RoleType :int
{
	Master = 1,
	Associate = 0
};

public enum ApplicationStatus :int
{
	Not_Assigned = 0,
	Associate_Assigned = 1,
	Complete = 2
};

>>>>>>> .r276
public class Global
{
    public Global()
    {
        //
        // TODO: Add constructor logic here
        //
    }
    


    public static string AppTitle
    {
        get
        {
            return " - ReturnFilling.com";
        }
    }

	public static Dictionary<int, UserManagement> UsersList = new Dictionary<int, UserManagement>();

	public static void LoadUsers()
	{
		UsersList.Clear();
		using (ReturnFilingEntities context = new ReturnFilingEntities(Global.ConnectionStringEntity))
		{
			foreach (UserManagement usr in context.UserManagements)
			{
				UsersList.Add(usr.ID, usr);
			}
		}
	}

    public static void LoadGlobalData()
    {
		LoadUsers();
    }

	public static string SuccesMessage(string msg)
	{
		return "<span class='success'>" + msg + "</span>";
	}
	public static string ErrorMessage(string msg)
	{
		return "<span class='error'>" + msg + "</span>";
	}

	public static void CheckLogin()
	{ 
		if(Global.CandidateID==0)
			HttpContext.Current.Response.Redirect("/");
	}

    public static string BlogID { get; set; }
    public static void LogoutReset()
    {
        Global.UserType = -1;
        Global.UserName = "";
        Global.UserID = 0;
        Global.LogInDone = false;
    }

	public static string ConnectionStringEntity
	{
		get
		{
			return @"metadata=res://*/App_Code.ReturnFilingModel.csdl|res://*/App_Code.ReturnFilingModel.ssdl|res://*/App_Code.ReturnFilingModel.msl;provider=System.Data.SqlServerCe.4.0;provider connection string=""Data Source=|DataDirectory|\ReturnFiling.sdf;""";
		}
	}

    public static string ConnectionString
    {
        get
        {
            return @"Data Source=|DataDirectory|\ReturnFiling.sdf";
        }
    }

    public static Boolean LogInDone
    {
        get
        {
            if (HttpContext.Current.Session["LOGINDONE"] == null)
                return false;
            else
                return HttpContext.Current.Session["LOGINDONE"].ToString() == "1" ? true : false;
        }
        set
        {
            HttpContext.Current.Session["LOGINDONE"] = value ? "1" : "0";
        }
    }
    
    public static string UserName
    {
        get
        {
            if (HttpContext.Current.Session["USERNAME"] == null)
                return "";
            else
                return HttpContext.Current.Session["USERNAME"].ToString();
        }

        set
        {
            HttpContext.Current.Session["USERNAME"] = value;
        }
    }

    public static string MenuPDFData
    {
        get
        {
            if (HttpContext.Current.Session["MENUPDFDATA"] == null)
                return "";
            else
                return HttpContext.Current.Session["MENUPDFDATA"].ToString();
        }

        set
        {
            HttpContext.Current.Session["MENUPDFDATA"] = value;
        }
    }


    public static int UserType
    {
        get
        {
            if (HttpContext.Current.Session["USERTYPE"] == null)
                return -1;
            else
                return Cmn.ToInt(HttpContext.Current.Session["USERTYPE"]);
        }
        set
        {
            HttpContext.Current.Session["USERTYPE"] = value;
        }
    }

    public static int UserID
    {
        get
        {
            if (HttpContext.Current.Session["USERID"] == null)
                return -1;
            else
                return Cmn.ToInt(HttpContext.Current.Session["USERID"]);
        }
        set
        {
            HttpContext.Current.Session["USERID"] = value;
        }
    }

    public static string Culture
    {
        get
        {
            if (HttpContext.Current.Session["Culture"] == null)
                return "en-US";
            else
                return HttpContext.Current.Session["Culture"].ToString();
        }

        set
        {
            HttpContext.Current.Session["Culture"] = value;
        }
    }
    
    public static string FromPage
    {
        get
        {
            if (HttpContext.Current.Session["FROMPAGE"] == null)
                return "";
            else
                return HttpContext.Current.Session["FROMPAGE"].ToString();
        }
        set
        {
            HttpContext.Current.Session["FROMPAGE"] = value;
        }
    }
    
    public static string UserEmailID
    {
        get
        {
            if (HttpContext.Current.Session["UserEmailID"] == null)
                return "";
            else
                return HttpContext.Current.Session["UserEmailID"].ToString();
        }
        set
        {
            HttpContext.Current.Session["UserEmailID"] = value;
        }
    }
    
    public static Boolean IsAdmin
    {
        get
        {
            if (HttpContext.Current.Session["ISADMIN"] == null)
                return false;
            else
                return HttpContext.Current.Session["ISADMIN"].ToString() == "1" ? true : false;
        }
        set
        {
            HttpContext.Current.Session["ISADMIN"] = value ? "1" : "0";
        }
    }
    
    public static string GetRootPathVirtual       //get vertual path
    {
        get
        {
            string host = (HttpContext.Current.Request.Url.IsDefaultPort) ?
            HttpContext.Current.Request.Url.Host :
            HttpContext.Current.Request.Url.Authority;
            host = String.Format("{0}://{1}", HttpContext.Current.Request.Url.Scheme, host);
            if (HttpContext.Current.Request.ApplicationPath == "/")
                return host;
            else
                return host + HttpContext.Current.Request.ApplicationPath;
        }
    }

    public static string DOB
    {
        get
        {
            if (HttpContext.Current.Session["DOB"] == null)
                return "";
            else
                return HttpContext.Current.Session["DOB"].ToString();
        }
        set
        {
            HttpContext.Current.Session["DOB"] = value;
        }
    }

    public static int Gender
    {
        get
        {
            if (HttpContext.Current.Session["GENDER"] == null)
                return -1;
            else
                return Cmn.ToInt(HttpContext.Current.Session["GENDER"]);
        }
        set
        {
            HttpContext.Current.Session["GENDER"] = value;
        }
    }

    public static string PDFName
    {
        get
        {
            if (HttpContext.Current.Session["PDFNAME"] == null)
                return "";
            else
                return HttpContext.Current.Session["PDFNAME"].ToString();
        }
        set
        {
            HttpContext.Current.Session["PDFNAME"] = value;
        }
    }

	public static int CandidateID
	{
		get
		{
			if (HttpContext.Current.Session["CANDIDATEID"] == null)
				return 0;
			else
				return Cmn.ToInt(HttpContext.Current.Session["CANDIDATEID"].ToString());
		}
		set
		{
			HttpContext.Current.Session["CANDIDATEID"] = value;
		}
	}

	public static string PANNumber
	{
		get
		{
			if (HttpContext.Current.Session["PANNUMBER"] == null)
				return "";
			else
				return HttpContext.Current.Session["PANNUMBER"].ToString();
		}
		set
		{
			HttpContext.Current.Session["PANNUMBER"] = value;
		}
	}

	public static string AssessmentYear
	{
		get
		{
			if (HttpContext.Current.Session["ASSESSMENTYEAR"] == null)
				return "";
			else
				return HttpContext.Current.Session["ASSESSMENTYEAR"].ToString();
		}
		set
		{
			HttpContext.Current.Session["ASSESSMENTYEAR"] = value;
		}
	}
}
